#!/usr/bin/env python3
"""
Re-analyze PDF formats after user deleted incorrect PDFs
"""

import os
import PyPDF2
import re
from collections import defaultdict

def analyze_pdf_formats():
    """Analyze all PDFs to identify different formats"""
    
    print("=== RE-ANALYZING PDF FORMATS ===\n")
    
    pdf_folder = "Flames/Scorecards"
    
    if not os.path.exists(pdf_folder):
        print(f"Folder not found: {pdf_folder}")
        return
    
    # Get all PDFs
    all_pdfs = [f for f in os.listdir(pdf_folder) if f.endswith('.pdf')]
    
    print(f"Total PDFs found: {len(all_pdfs)}\n")
    
    # Categorize PDFs by filename pattern
    named_pdfs = [f for f in all_pdfs if not f.startswith('Scorecard_')]
    scorecard_pdfs = [f for f in all_pdfs if f.startswith('Scorecard_')]
    
    print(f"Named PDFs (old format): {len(named_pdfs)}")
    print(f"Scorecard_* PDFs (new format): {len(scorecard_pdfs)}\n")
    
    # Analyze a sample of each type
    format_samples = {}
    
    print("=== ANALYZING NAMED PDFs ===")
    if named_pdfs:
        # Sample first 5 named PDFs
        for pdf_file in named_pdfs[:5]:
            pdf_path = os.path.join(pdf_folder, pdf_file)
            format_type = identify_pdf_format(pdf_path, pdf_file)
            
            if format_type not in format_samples:
                format_samples[format_type] = []
            format_samples[format_type].append(pdf_file)
    
    print("\n=== ANALYZING SCORECARD PDFs ===")
    if scorecard_pdfs:
        # Sample first 10 scorecard PDFs
        for pdf_file in scorecard_pdfs[:10]:
            pdf_path = os.path.join(pdf_folder, pdf_file)
            format_type = identify_pdf_format(pdf_path, pdf_file)
            
            if format_type not in format_samples:
                format_samples[format_type] = []
            format_samples[format_type].append(pdf_file)
    
    # Summary
    print("\n" + "="*80)
    print("FORMAT ANALYSIS SUMMARY")
    print("="*80)
    
    for format_type, samples in format_samples.items():
        print(f"\n{format_type}:")
        print(f"  Sample count: {len(samples)}")
        print(f"  Sample files:")
        for sample in samples[:3]:
            print(f"    - {sample}")
    
    print(f"\nTotal unique formats identified: {len(format_samples)}")
    
    return format_samples

def identify_pdf_format(pdf_path, filename):
    """Identify the format of a PDF"""
    
    print(f"\nAnalyzing: {filename}")
    
    try:
        with open(pdf_path, 'rb') as file:
            pdf_reader = PyPDF2.PdfReader(file)
            
            # Get first page text
            if len(pdf_reader.pages) > 0:
                first_page_text = pdf_reader.pages[0].extract_text()
                
                # Print first 500 characters
                print(f"  First 500 chars: {first_page_text[:500]}")
                
                # Identify format based on keywords
                format_indicators = {
                    "FRIENDLY_FORMAT": ["First Innings-Batting", "First Innings-Bowling", "Batsman RB0s4s6sSR"],
                    "ALLSTAR_FORMAT": ["ALLSTAR", "Championship", "ALLSTAR Championship"],
                    "MODERN_DIGITAL_FORMAT": ["CricHeroes", "Scorer", "Generated by"],
                    "GRAND_ASHES_FORMAT": ["Grand Ashes", "Ashes"],
                    "RAFTAAR_FORMAT": ["Raftaar", "RAFTAAR"]
                }
                
                detected_format = "UNKNOWN_FORMAT"
                
                for format_name, indicators in format_indicators.items():
                    if any(indicator in first_page_text for indicator in indicators):
                        detected_format = format_name
                        break
                
                print(f"  Detected format: {detected_format}")
                return detected_format
            else:
                print(f"  Error: No pages found")
                return "ERROR_NO_PAGES"
                
    except Exception as e:
        print(f"  Error reading PDF: {e}")
        return "ERROR_READING"

def main():
    """Main function"""
    
    format_samples = analyze_pdf_formats()
    
    # Save results
    print("\n" + "="*80)
    print("NEXT STEPS")
    print("="*80)
    print("\nBased on the formats identified:")
    print("1. We will create separate extractors for each format type")
    print("2. Test each extractor on sample files")
    print("3. Once verified, extract all PDFs of that format")
    print("4. Build the complete database")
    print("\nPlease review the format analysis above and let me know which format")
    print("you'd like to work on next!")

if __name__ == "__main__":
    main()
